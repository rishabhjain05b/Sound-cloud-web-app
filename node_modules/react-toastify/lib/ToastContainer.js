'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _TransitionGroup = require('react-transition-group/TransitionGroup');

var _TransitionGroup2 = _interopRequireDefault(_TransitionGroup);

var _Toast = require('./Toast');

var _Toast2 = _interopRequireDefault(_Toast);

var _DefaultCloseButton = require('./DefaultCloseButton');

var _DefaultCloseButton2 = _interopRequireDefault(_DefaultCloseButton);

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

var _EventManager = require('./util/EventManager');

var _EventManager2 = _interopRequireDefault(_EventManager);

var _objectValues = require('./util/objectValues');

var _objectValues2 = _interopRequireDefault(_objectValues);

var _propValidator = require('./util/propValidator');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ToastContainer = function (_Component) {
  _inherits(ToastContainer, _Component);

  function ToastContainer(props) {
    _classCallCheck(this, ToastContainer);

    var _this = _possibleConstructorReturn(this, (ToastContainer.__proto__ || Object.getPrototypeOf(ToastContainer)).call(this, props));

    _this.state = {
      toast: []
    };
    _this.collection = {};
    return _this;
  }

  _createClass(ToastContainer, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      _EventManager2.default.on(_config2.default.ACTION.SHOW, function (content, options) {
        return _this2.show(content, options);
      }).on(_config2.default.ACTION.CLEAR, function (id) {
        return id !== null ? _this2.removeToast(id) : _this2.clear();
      }).emit(_config2.default.ACTION.MOUNTED);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      _EventManager2.default.off(_config2.default.ACTION.SHOW);
      _EventManager2.default.off(_config2.default.ACTION.CLEAR);
    }
  }, {
    key: 'removeToast',
    value: function removeToast(id) {
      this.setState({
        toast: this.state.toast.filter(function (v) {
          return v !== parseInt(id, 10);
        })
      });
    }
  }, {
    key: 'with',
    value: function _with(component, props) {
      return (0, _react.cloneElement)(component, _extends({}, props, component.props));
    }
  }, {
    key: 'makeCloseButton',
    value: function makeCloseButton(toastClose, toastId) {
      var _this3 = this;

      var closeButton = this.props.closeButton;

      if ((0, _react.isValidElement)(toastClose) || toastClose === false) {
        closeButton = toastClose;
      }

      return closeButton === false ? false : this.with(closeButton, {
        closeToast: function closeToast() {
          return _this3.removeToast(toastId);
        }
      });
    }
  }, {
    key: 'getAutoCloseDelay',
    value: function getAutoCloseDelay(toastAutoClose) {
      return toastAutoClose === false || (0, _propValidator.isValidDelay)(toastAutoClose) ? toastAutoClose : this.props.autoClose;
    }
  }, {
    key: 'isFunction',
    value: function isFunction(object) {
      return !!(object && object.constructor && object.call && object.apply);
    }

    /**
     * TODO: check if throwing an error can be helpful
     */

  }, {
    key: 'canBeRendered',
    value: function canBeRendered(content) {
      return (0, _react.isValidElement)(content) || (0, _propValidator.typeOf)(content) === 'String' || (0, _propValidator.typeOf)(content) === 'Number';
    }
  }, {
    key: 'show',
    value: function show(content, options) {
      var _this4 = this;

      if (this.canBeRendered(content)) {
        var toastId = options.toastId;
        var closeToast = function closeToast() {
          return _this4.removeToast(toastId);
        };
        var toastOptions = {
          id: toastId,
          type: options.type,
          closeButton: this.makeCloseButton(options.closeButton, toastId),
          position: options.position || this.props.position
        };

        this.isFunction(options.onOpen) && (toastOptions.onOpen = options.onOpen);

        this.isFunction(options.onClose) && (toastOptions.onClose = options.onClose);

        toastOptions.autoClose = this.getAutoCloseDelay(options.autoClose !== false ? parseInt(options.autoClose, 10) : options.autoClose);

        toastOptions.hideProgressBar = typeof options.hideProgressBar === 'boolean' ? options.hideProgressBar : this.props.hideProgressBar;

        toastOptions.closeToast = closeToast;

        if ((0, _react.isValidElement)(content) && (0, _propValidator.typeOf)(content.type) !== 'String') {
          content = this.with(content, {
            closeToast: closeToast
          });
        }

        this.collection = Object.assign({}, this.collection, _defineProperty({}, toastId, {
          content: this.makeToast(content, toastOptions),
          position: toastOptions.position
        }));

        this.setState({
          toast: [].concat(_toConsumableArray(this.state.toast), [toastId])
        });
      }
    }
  }, {
    key: 'makeToast',
    value: function makeToast(content, options) {
      return _react2.default.createElement(
        _Toast2.default,
        _extends({}, options, {
          key: 'toast-' + options.id + ' '
        }),
        content
      );
    }
  }, {
    key: 'clear',
    value: function clear() {
      this.setState({ toast: [] });
    }
  }, {
    key: 'hasToast',
    value: function hasToast() {
      return this.state.toast.length > 0;
    }
  }, {
    key: 'getContainerProps',
    value: function getContainerProps(pos, disablePointer) {
      var props = {
        className: 'toastify toastify--' + pos,
        style: disablePointer ? { pointerEvents: 'none' } : {}
      };

      if (this.props.className !== null) {
        props.className = props.className + ' ' + this.props.className;
      }

      if (this.props.style !== null) {
        props.style = Object.assign({}, this.props.style, props.style);
      }

      return props;
    }
  }, {
    key: 'renderToast',
    value: function renderToast() {
      var _this5 = this;

      var toastToRender = {};
      var collection = Object.keys(this.collection);

      collection.forEach(function (toastId) {
        var item = _this5.collection[toastId];
        toastToRender[item.position] || (toastToRender[item.position] = []);

        if (_this5.state.toast.includes(parseInt(toastId, 10))) {
          toastToRender[item.position].push(item.content);
        } else {
          // Temporal zone for animation
          toastToRender[item.position].push(null);
          // Delay garbage collecting. Useful when a lots of toast
          setTimeout(function () {
            return delete _this5.collection[toastId];
          }, collection.length * 10);
        }
      });

      return Object.keys(toastToRender).map(function (position) {
        var disablePointer = toastToRender[position].length === 1 && toastToRender[position][0] === null;

        return _react2.default.createElement(
          _TransitionGroup2.default,
          _extends({
            component: 'div'
          }, _this5.getContainerProps(position, disablePointer), {
            key: 'container-' + position
          }),
          toastToRender[position].map(function (item) {
            return item;
          })
        );
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        null,
        this.renderToast()
      );
    }
  }]);

  return ToastContainer;
}(_react.Component);

ToastContainer.propTypes = {
  /**
   * Set toast position
   */
  position: _propTypes2.default.oneOf((0, _objectValues2.default)(_config2.default.POSITION)),

  /**
   * Disable or set autoClose delay
   */
  autoClose: _propValidator.falseOrNumber,

  /**
   * Disable or set a custom react element for the close button
   */
  closeButton: _propValidator.falseOrElement,

  /**
   * Hide or not progress bar when autoClose is enabled
   */
  hideProgressBar: _propTypes2.default.bool,

  /**
   * An optional className
   */
  className: _propTypes2.default.string,

  /**
   * An optional style
   */
  style: _propTypes2.default.object
};
ToastContainer.defaultProps = {
  position: _config2.default.POSITION.TOP_RIGHT,
  autoClose: 5000,
  hideProgressBar: false,
  closeButton: _react2.default.createElement(_DefaultCloseButton2.default, null),
  className: null,
  style: null
};
exports.default = ToastContainer;